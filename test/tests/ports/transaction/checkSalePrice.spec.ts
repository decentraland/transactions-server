import { ChainId } from '@dcl/schemas'
import { utils } from 'ethers'
import { TransactionData } from '../../../../src/ports/transaction/types'
import { getSalePrice } from '../../../../src/ports/transaction/validation/checkSalePrice'

describe('getSalePrice', () => {
  describe('when getting the sale price for a store buy', () => {
    it('should return the supplied sale price for the meta transaction', () => {
      const params: TransactionData['params'] = [
        '0x6ddF1b1924DAD850AdBc1C02026535464Be06B0c',
        '0x0c53c51c0000000000000000000000001d9aa2025b67f0f21d1603ce521bda7869098f8a00000000000000000000000000000000000000000000000000000000000000a0cd75d528f0f890bb3e1c602c0d6594ef6a1d44de54be0e3d40bea6b960efa73f5f94e236aff853375a3914979b4b62d0b4475738a05ede0b12bfda47a3cd085a000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000001a4a4fdc78a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000052c98c80a5aad12056596d3b2dd4139c327bc501000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001d9aa2025b67f0f21d1603ce521bda7869098f8a00000000000000000000000000000000000000000000000000000000',
      ]
      expect(getSalePrice(params, ChainId.MATIC_MUMBAI)).toEqual(
        utils.parseUnits('10').toString()
      )
    })
  })

  describe('when getting the sale price for a marketplace buy', () => {
    it('should return the supplied sale price for the meta transaction', () => {
      const params: TransactionData['params'] = [
        '0x5A467398dfa9d5C663a656423A2D055f538198A4',
        '0x0c53c51c0000000000000000000000001d9aa2025b67f0f21d1603ce521bda7869098f8a00000000000000000000000000000000000000000000000000000000000000a0209754a27744d91f453575a6acffdafa8bb33e89ca1234cf35552ae9e7f2dd944bca94fc1fa2e344c6c8f69780585fd084edf059f96a7eef27a970a98f536de1000000000000000000000000000000000000000000000000000000000000001b0000000000000000000000000000000000000000000000000000000000000064ae7b03330000000000000000000000005c8bf33e673dc712ba62c5459e59dd9a15d458ff000000000000000000000000000000000000000000000000000000000000000b00000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000000000000000',
      ]
      expect(getSalePrice(params, ChainId.MATIC_MUMBAI)).toEqual(
        utils.parseUnits('1000').toString()
      )
    })
  })

  describe('when getting the sale price for a place bid', () => {
    it('should return the supplied sale price for the meta transaction', () => {
      const params: TransactionData['params'] = [
        '0x78Dd92c8941dBC7BE54E2a9390D58aD28AD97afD',
        '0x0c53c51c0000000000000000000000001d9aa2025b67f0f21d1603ce521bda7869098f8a00000000000000000000000000000000000000000000000000000000000000a08a996249f9e3327542a5ba864743646281b162e8a9cd6c0b29958dce67fb64270804371ef347dd8c128194860ced11ee6e2d339ebda48738f5e036b9a803f53c000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000008481281be80000000000000000000000005c8bf33e673dc712ba62c5459e59dd9a15d458ff000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000001158e460913d000000000000000000000000000000000000000000000000000000000000000269e1000000000000000000000000000000000000000000000000000000000',
      ]
      expect(getSalePrice(params, ChainId.MATIC_MUMBAI)).toEqual(
        utils.parseUnits('20').toString()
      )
    })
  })

  describe('when decoding an empty contract function', () => {
    it('should return null', () => {
      expect(getSalePrice(['', ''], ChainId.MATIC_MUMBAI)).toEqual(null)
    })
  })

  describe('when decoding the contract function fails', () => {
    it('should return null', () => {
      const params: TransactionData['params'] = [
        '0x78Dd92c8941dBC7BE54E2a9390D58aD28AD97afD',
        // invalid function signature below
        '0x0a53c51c0000000000000000000000001d9aa2025b67f0f21d1603ce521bda7869098f8a00000000000000000000000000000000000000000000000000000000000000a08a996249f9e3327542a5ba864743646281b162e8a9cd6c0b29958dce67fb64270804371ef347dd8c128194860ced11ee6e2d339ebda48738f5e036b9a803f53c000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000008481281be80000000000000000000000005c8bf33e673dc712ba62c5459e59dd9a15d458ff000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000001158e460913d000000000000000000000000000000000000000000000000000000000000000269e1000000000000000000000000000000000000000000000000000000000',
      ]
      expect(getSalePrice(params, ChainId.MATIC_MUMBAI)).toEqual(null)
    })
  })
})
